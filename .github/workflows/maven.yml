# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI/CD with Maven for AWS Deployment

'on':
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        java: [17]
    environment:
      name: dev
      
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java }}
          distribution: temurin
          cache: maven

      - name: Test
        run: mvn test
        
      - name: Build with Maven
        run: mvn -B package --file pom.xml
        
      - name: Log in to Docker Hub
        run: echo ${{ secrets.DOCKER_PASSWORD  }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/expensemanagement:latest .

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/expensemanagement:latest

      - name: Get GitHub runner IP
        id: ip
        uses: haythem/public-ip@v1.2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Add runner IP to EC2 security group
        run: |
          aws ec2 authorize-security-group-ingress \
            --group-id ${{ secrets.EC2_SECURITY_GROUP_ID }} \
            --protocol tcp --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32
      
      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          pwd
          ls
          which ssh-keyscan
          echo "go on"
          echo ${{ secrets.EC2_SSH_KEY }} > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
          
      - name: SSH and deploy Docker container
        run: |
          ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_HOST }} << 'EOF'
          
            if [ "$(docker ps --filter "name=expensemanagementcontainer" --filter "status=running" --format "{{.Names}}")" = "expensemanagementcontainer" ]; then
              echo "Stopping container..."
            	sudo docker stop expensemanagementcontainer || true
            	
            	echo "Removing container..."
            	sudo docker rm expensemanagementcontainer || true
            	echo "Removing image..."
            	sudo docker rmi tostos/expensemanagement:latest || true
           else
             echo "Container is not running"
          fi
            echo "Running new container..."
            sudo docker run -d --name expensemanagementcontainer -p 80:8080 tostos/expensemanagement
          EOF
      - name: Remove runner IP from EC2 security group
        if: always()
        run: |
          aws ec2 revoke-security-group-ingress \
            --group-id ${{ secrets.EC2_SECURITY_GROUP_ID }} \
            --protocol tcp --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32
